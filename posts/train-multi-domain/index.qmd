---
title: Task Selction in Multi-Domain Training
author: Zhang, Liang
format:
  html: 
    toc: true
    code-fold: true
    css: style.css
execute: 
  warning: false
  message: false
---

```{r}
#| label: setup

library(tidyverse)
library(lavaan)
# we need bit64 package to handle large integers
requireNamespace("bit64")

projects <- targets::tar_config_yaml()
targets::tar_load(
  c(fit_origin_highorder, fit_origin_bifactor, dims_origin),
  store = projects$update_factors$store
)
targets::tar_load(
  c(indices_of_interest, indices_wider_clean),
  store = projects$prepare_source_data$store
)
dim_label_map <- dims_origin |> 
  distinct(dim_label, dim_name) |> 
  deframe()
game_name_map <- data.iquizoo::game_info |> 
  distinct(game_name_abbr, game_name) |> 
  deframe()

# custom functions ----
extract_latent_scores <- function(fit) {
  fit |> 
    lavPredict() |> 
    unclass() |> 
    as_tibble() |> 
    relocate(g, .before = 1)
}

visualize_latent_structure <- function(scores, dim_label_map) {
  colors <- c("#4477AA", "#77AADD", "#FFFFFF", "#EE9988", "#BB4444")
  cor_mat <- scores |> 
    rename_with(~ dim_label_map[.x], all_of(names(dim_label_map))) |>
    cor()
  new_order <- order(cor_mat[,"g"], decreasing = TRUE)
  cor_mat[new_order, new_order] |> 
    corrplot::corrplot(
      method = "color",
      type = "upper",
      tl.col = "black",
      tl.srt = 45,
      tl.cex = 0.8,
      addCoef.col = "black",
      number.cex = 0.8,
      diag = FALSE,
      tl.offset = 0.5,
      col = colorRampPalette(colors)(200)
    )
}
```

# Correlation among Latent Factors

```{r}
#| label: corr-latent
#| fig-cap: >
#|   Correlation among latent factors.
#| fig-subcap: 
#|   - The bifactor model scores.
#|   - The 2nd order model scores.

scores_latent <- list(
  bifactor = fit_origin_bifactor,
  highorder = fit_origin_highorder
) |> 
  map(extract_latent_scores)

scores_latent |> 
  walk(
    ~ visualize_latent_structure(
      .x, 
      dim_label_map
    )
  )
```

The correlation matrix by 2nd order model is more reasonable. 

After excluding transfer domains (`"Reasoning"` and `"Episodic Memory"`), the most correlated 2 domains with `g` are `"Verbal STM"` and `"Spatial STM"`. However, we should decide the last one domain to include as training domain. Although a little less correlated with `g`, `Divided Attention` is recommended as the last training domain because `Inhbition` and `Speed` are not so reasonable to be included as training domains.

# Selection Results

As a reference, here we list the correlations with all latent factors for all tasks. (Rows with [pink]{.pink} background are the **transfer domains**, rows with [green]{.green} background are the **training domains**.)

```{r}
#| label: corr-task-latent
#| column: page

dim_order <- with(
  scores_latent, 
  cor(
    select(highorder, g), 
    select(highorder, -g)
  )[1, ]
) |> 
  sort(decreasing = TRUE) |> 
  names()
dim_transfer <- c("Rsn", "EM")
dim_train <- c("VSTM", "SSTM", "AttDiv")
corrs_task_dim <- indices_of_interest |> 
  left_join(
    scores_latent$highorder |> 
      add_column(user_id = indices_wider_clean$user_id),
    by = "user_id"
  ) |> 
  summarise(
    across(
      all_of(c("g", dims_origin$dim_label)),
      ~ cor(score_adj, .x, use = "pairwise.complete.obs")
    ),
    .by = game_index
  ) |> 
  inner_join(
    select(dims_origin, game_index, dim_label),
    by = "game_index"
  ) |> 
  relocate(dim_label, .after = game_index) |>
  separate_wider_delim(
    game_index,
    ".",
    names = c("game_name_abbr", "index_name"),
    cols_remove = FALSE
  ) |> 
  mutate(
    game_name = game_name_map[game_name_abbr],
    dim_name = dim_label_map[dim_label]
  ) |> 
  select(
    game_index, dim_name, game_name, g, all_of(dim_order)
  )

corrs_task_dim |> 
  select(-game_index) |> 
  gt::gt() |> 
  gt::fmt_number(
    columns = c("g", all_of(names(dim_label_map))),
    decimals = 2
  ) |> 
  gtExtras::gt_highlight_rows(
    rows = dim_name %in% dim_label_map[dim_transfer],
    fill = "#FFCCCC"
  ) |> 
  gtExtras::gt_highlight_rows(
    rows = dim_name %in% dim_label_map[dim_train],
    fill = "#CCFFCC"
  ) |> 
  gt::tab_header(
    title = "Task Selection Results",
    subtitle = "The most correlated task with g for each dimension/domain."
  ) |> 
  gt::opt_interactive(
    use_filters = TRUE,
    use_highlight = TRUE
  )
```

## Transfer Tasks

This is relatively simple. We select the task with the largest correlation with each domain (see the highlighted row in @tbl-transfer-tasks).

```{r}
#| label: tbl-transfer-tasks
#| tbl-cap: The selected transfer tasks

corrs_task_dim |> 
  select(-game_index) |>
  filter(dim_name %in% dim_label_map[dim_transfer]) |> 
  arrange(desc(g)) |> 
  gt::gt() |> 
  gt::fmt_number(
    columns = c("g", all_of(names(dim_label_map))),
    decimals = 2
  ) |> 
  gtExtras::gt_highlight_rows(
    rows = Rsn == max(Rsn) | EM == max(EM),
    fill = "#FFCCCC",
    bold_target_only = TRUE,
    target_col = c(game_name, Rsn, EM)
  )
```

## Training Tasks (Training Group)

For training tasks, we will consider the correlations with the training domain, the transfer tasks and `g`. The tasks should be most related to `g`, and the correlations between the training task and transfer task should also be matched. 

```{r}
#| label: tbl-train-tasks-train-group
#| tbl-cap: >
#|   The selected training tasks (train group). The rows with darker background 
#|   are from three different domains, and the rows with lighter background are
#|   from the same domain.

tasks_transfer <- c("三维心理旋转测试A", "词汇学习")
tasks_train <- c("蝴蝶照相机", "幸运小球PRO", "火眼金睛")
tasks_train_1 <- c("密码箱", "顺背数PRO")
corr_task_transfer <- indices_of_interest |> 
  inner_join(
    select(dims_origin, game_index, dim_label),
    by = "game_index"
  ) |> 
  filter(!dim_label %in% dim_transfer) |> 
  inner_join(
    indices_of_interest |> 
      filter(game_name %in% tasks_transfer) |>
      pivot_wider(
        id_cols = user_id,
        names_from = game_name,
        values_from = score_adj
      ),
    by = "user_id"
  ) |> 
  summarise(
    across(
      all_of(tasks_transfer),
      ~ cor(score_adj, .x, use = "pairwise.complete.obs")
    ),
    .by = game_index
  )

corrs_task_dim |> 
  filter(dim_name %in% dim_label_map[dim_train]) |> 
  left_join(
    corr_task_transfer,
    by = "game_index"
  ) |>
  select(
    dim_name, game_name, 
    g, SSTM, VSTM, AttDiv, Rsn, EM, 
    all_of(tasks_transfer)
  ) |> 
  arrange(desc(g)) |> 
  gt::gt() |> 
  gt::fmt_number(decimals = 2) |> 
  gtExtras::gt_highlight_rows(
    rows = game_name %in% tasks_train,
    fill = "#55FF55"
  ) |> 
  gtExtras::gt_highlight_rows(
    rows = game_name %in% tasks_train_1,
    fill = "#CCFFCC"
  )
```

## Training Tasks (Active Control Group)

For this group, the domain least correlated with g, i.e., `Shifting` is selected. We choose the 3 most correlated tasks with `Shifting` as the training task.

```{r}
#| label: tbl-train-tasks-control-group
#| tbl-cap: >
#|   The selected training tasks (control group).

dim_control <- "Shift"
corrs_task_dim |> 
  filter(dim_name %in% dim_label_map[dim_control]) |> 
  left_join(
    corr_task_transfer,
    by = "game_index"
  ) |> 
  select(
    dim_name, game_name, 
    g, Shift, Rsn, EM, 
    all_of(tasks_transfer)
  ) |> 
  arrange(desc(g)) |> 
  gt::gt() |> 
  gt::fmt_number(decimals = 2) |> 
  gtExtras::gt_highlight_rows(
    rows = dense_rank(desc(Shift)) <= 3,
    fill = "gray"
  )
```
